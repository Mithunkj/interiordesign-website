

index.html
--------------
 <div class="container">
        <div class="col-4">
          <div class="img-card">
            <div class="content">
              <div class="heroImgLeftSce">
                <img src="./images/imgcan1.jpg" />
              </div>
              <div class="heroImgLeftThi">
                <img src="./images/imgcan1.jpg" />
              </div>
            </div>
          </div>
        </div>
      </div>

index.css
------------
* {
  box-sizing: border-box;
}

.img-card {
  background: url("./images/imgdallp.jpg") no-repeat;
  background-size: cover;
  max-width: 500px;
  margin: auto;
  /* height: auto; */
  height: 100%;
  padding: 40px;
  position: relative;
  color: #fff;
  transition: transform 0.1s ease;
  transform-style: preserve-3d;
  will-change: transform;
}

.img-card::before {
  content: "";
  background: rgba(0, 0, 0, 0.4);
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
}

/* Slight parallax effect on hover */
.img-card:hover .content {
  transform: translateZ(20px);
}

.content {
  position: relative;
  z-index: 1;
  transition: transform 0.3s ease;
}

index.js
---------
const card = document.querySelector(".img-card");
const motionMatchMedia = window.matchMedia("(prefers-reduced-motion)");
const THRESHOLD = 15;

/*
 * Read the blog post here:
 * https://letsbuildui.dev/articles/a-3d-hover-effect-using-css-transforms
 */
function handleHover(e) {
  const { clientX, clientY, currentTarget } = e;
  const { clientWidth, clientHeight, offsetLeft, offsetTop } = currentTarget;

  const horizontal = (clientX - offsetLeft) / clientWidth;
  const vertical = (clientY - offsetTop) / clientHeight;
  const rotateX = (THRESHOLD / 2 - horizontal * THRESHOLD).toFixed(2);
  const rotateY = (vertical * THRESHOLD - THRESHOLD / 2).toFixed(2);

  card.style.transform = `perspective(${clientWidth}px) rotateX(${rotateY}deg) rotateY(${rotateX}deg) scale3d(1, 1, 1)`;
}

function resetStyles(e) {
  card.style.transform = `perspective(${e.currentTarget.clientWidth}px) rotateX(0deg) rotateY(0deg)`;
}

if (!motionMatchMedia.matches) {
  card.addEventListener("mousemove", handleHover);
  card.addEventListener("mouseleave", resetStyles);
}